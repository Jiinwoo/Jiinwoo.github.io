{"componentChunkName":"component---src-templates-post-tsx","path":"/tech-of-supporting-coding_2/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>본 포스팅은 니시오 히로카즈의 '코딩을 지탱하는 기술' 을 읽은 뒤 쓰는 글입니다.</p>\n</blockquote>\n<h2 id=\"문법이란-무엇일까\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EB%B2%95%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C\" aria-label=\"문법이란 무엇일까 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%EB%AC%B8%EB%B2%95%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C\" aria-label=\"문법이란 무엇일까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문법이란 무엇일까</h2>\n<p>프로그래밍 언어를 배울 때 \"연산자 우선순위\"라는 문법을 배운다.\n'1 + 2 * 3' 같은 식에서 어느 순서대로 계산이 먼저될지 배우는 것인데 옛날에는 (1+2)*3의 형태로 계산되는 경우도 있다고 한다.\n하지만 지금 대부분은 7이 나오는데 그 이유는 각 프로그래밍 언어에서 \"+보다 *가 연산자가 높기 때문에 먼저 계산한다.\"라는 규칙을 정했기 때문이다.</p>\n<p>여기에서 알 수 있듯이 문법이란 언어 설계자가 정한 규칙이다. </p>\n<h2 id=\"스택머신\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%83%9D%EB%A8%B8%EC%8B%A0\" aria-label=\"스택머신 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%EC%8A%A4%ED%83%9D%EB%A8%B8%EC%8B%A0\" aria-label=\"스택머신 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스택머신</h2>\n<h3 id=\"forth의-스택머신\" style=\"position:relative;\"><a href=\"#forth%EC%9D%98-%EC%8A%A4%ED%83%9D%EB%A8%B8%EC%8B%A0\" aria-label=\"forth의 스택머신 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#forth%EC%9D%98-%EC%8A%A4%ED%83%9D%EB%A8%B8%EC%8B%A0\" aria-label=\"forth의 스택머신 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FORTH의 스택머신</h3>\n<p>FORTH는 '1과 2를 더한다'를 다음과 같이 쓴다.</p>\n<deckgo-highlight-code   terminal=\"carbon\" >\n          <code slot=\"code\">    1 2 +</code>\n        </deckgo-highlight-code>\n<p>이렇게 쓰는데에는 스택을 사용하기 때문이다. </p>\n<p>처음에 '1'을 스택에 담고 다음 '2'도 스택에 담는다. 마지막 '+' 연산자를 만나 스택에서 2개를 꺼내 더한뒤 다시 스택에 담는다.\n최종 결과인 3이 나온다.</p>\n<h3 id=\"지금은--1-2--이렇게-안쓰는데요\" style=\"position:relative;\"><a href=\"#%EC%A7%80%EA%B8%88%EC%9D%80--1-2--%EC%9D%B4%EB%A0%87%EA%B2%8C-%EC%95%88%EC%93%B0%EB%8A%94%EB%8D%B0%EC%9A%94\" aria-label=\"지금은  1 2  이렇게 안쓰는데요 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%EC%A7%80%EA%B8%88%EC%9D%80--1-2--%EC%9D%B4%EB%A0%87%EA%B2%8C-%EC%95%88%EC%93%B0%EB%8A%94%EB%8D%B0%EC%9A%94\" aria-label=\"지금은  1 2  이렇게 안쓰는데요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>지금은  1 2 + 이렇게 안쓰는데요?</h3>\n<p>지금은 1 + 2 이렇게 사용하나 내부적으로는 FORTH 방식으로 실행된다!</p>\n<h2 id=\"구문트리\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EB%AC%B8%ED%8A%B8%EB%A6%AC\" aria-label=\"구문트리 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%EA%B5%AC%EB%AC%B8%ED%8A%B8%EB%A6%AC\" aria-label=\"구문트리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구문트리</h2>\n<p>(1+2)*3 을 LISP, FORTH와 비교해보자. </p>\n<p>LISP : (*(+ 1 2)3)</p>\n<p>FORTH: 1 2 + 3 *</p>\n<p>각 언어별로 나타나는 형태는 다르지만 추상 구문트리는 동일하게 나온다.\n이 추상 구문트리를 전위, 중위, 후위 표기법에 따라 나타낼 뿐 의미는 동일하다. </p>\n<h2 id=\"if가-없었던-때가-있었다고\" style=\"position:relative;\"><a href=\"#if%EA%B0%80-%EC%97%86%EC%97%88%EB%8D%98-%EB%95%8C%EA%B0%80-%EC%9E%88%EC%97%88%EB%8B%A4%EA%B3%A0\" aria-label=\"if가 없었던 때가 있었다고 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#if%EA%B0%80-%EC%97%86%EC%97%88%EB%8D%98-%EB%95%8C%EA%B0%80-%EC%9E%88%EC%97%88%EB%8B%A4%EA%B3%A0\" aria-label=\"if가 없었던 때가 있었다고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>if가 없었던 때가 있었다고?</h2>\n<p>원시적인 어셈블리어에는 if문이 없다. 하지만 C언어에는 if문이 있는데 C언어에서 if문을 사용하고 어셈블리어로 컴파일 하면 어셈블리어에서 movl, cmpl 명령어를 확인 할 수 있다.</p>\n<p>이 movl명령어는 뒤의 주소로 점프하라는 명령, cmpl은 비교하는 명령어다. </p>\n<h2 id=\"if-else의-장점\" style=\"position:relative;\"><a href=\"#if-else%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-label=\"if else의 장점 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#if-else%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-label=\"if else의 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>if-else의 장점</h2>\n<p>c언어에서 else문 없이 코드를 작성할 수 있을까? if 문과 goto를 사용하면 가능하다. 하지만 가독성 면에서 goto를 사용하는것에 비해 떨어지기 때문에 if else 구문을 사용하는 것이 낫다.</p>\n<h2 id=\"반복-while-if\" style=\"position:relative;\"><a href=\"#%EB%B0%98%EB%B3%B5-while-if\" aria-label=\"반복 while if permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%EB%B0%98%EB%B3%B5-while-if\" aria-label=\"반복 while if permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>반복 (while, if)</h2>\n<p>while은 대체할 수 있을까? 어셈블리어는 movl, cmpl사용하면 가능할 것 같다. 그렇다면 C언어에서는 if와 goto를 사용하면 while문을 대체할 수 있을것같다. </p>\n<p>하지만 그렇다면 while문은 대체 왜 쓰는 것일까? 그 이유는 '읽기 쉽게', '쓰기 쉽게' 위함이다. goto는 너무 강력하기 때문에 자칫 잘못하면 프로그램이 엉망이 되어버릴 수 있기 때문에\n사용하지 않고 while사용을 하는 것이다. </p>\n<p>for, foreach 문도 while로 대체가 가능하다. 하지만 위와 같은 이유인 '읽기 쉽게', '쓰기 쉽게' 하기 위해 탄생한 것이다. </p>","excerpt":"본 포스팅은 니시오 히로카즈의 '코딩을 지탱하는 기술' 을 읽은 뒤 쓰는 글입니다. 문법이란 무엇일까 프로그래밍 언어를 배울 때 \"연산자 우선순위\"라는 문법을 배운다. \n'1 + 2 *…","tableOfContents":"<ul>\n<li><a href=\"/tech-of-supporting-coding_2/#%EB%AC%B8%EB%B2%95%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C\">문법이란 무엇일까</a></li>\n<li>\n<p><a href=\"/tech-of-supporting-coding_2/#%EC%8A%A4%ED%83%9D%EB%A8%B8%EC%8B%A0\">스택머신</a></p>\n<ul>\n<li><a href=\"/tech-of-supporting-coding_2/#forth%EC%9D%98-%EC%8A%A4%ED%83%9D%EB%A8%B8%EC%8B%A0\">FORTH의 스택머신</a></li>\n<li><a href=\"/tech-of-supporting-coding_2/#%EC%A7%80%EA%B8%88%EC%9D%80--1-2--%EC%9D%B4%EB%A0%87%EA%B2%8C-%EC%95%88%EC%93%B0%EB%8A%94%EB%8D%B0%EC%9A%94\">지금은  1 2 + 이렇게 안쓰는데요?</a></li>\n</ul>\n</li>\n<li><a href=\"/tech-of-supporting-coding_2/#%EA%B5%AC%EB%AC%B8%ED%8A%B8%EB%A6%AC\">구문트리</a></li>\n<li><a href=\"/tech-of-supporting-coding_2/#if%EA%B0%80-%EC%97%86%EC%97%88%EB%8D%98-%EB%95%8C%EA%B0%80-%EC%9E%88%EC%97%88%EB%8B%A4%EA%B3%A0\">if가 없었던 때가 있었다고?</a></li>\n<li><a href=\"/tech-of-supporting-coding_2/#if-else%EC%9D%98-%EC%9E%A5%EC%A0%90\">if-else의 장점</a></li>\n<li><a href=\"/tech-of-supporting-coding_2/#%EB%B0%98%EB%B3%B5-while-if\">반복 (while, if)</a></li>\n</ul>","fields":{"slug":"/tech-of-supporting-coding_2/"},"frontmatter":{"title":"문법, 처리흐름 제어","date":"Dec 03, 2020","tags":["코딩을 지탱하는 기술"],"keywords":["코딩을 지탱하는 기술"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/tech-of-supporting-coding_2/","series":[{"slug":"/tech-of-supporting-coding_1/","title":"효율적으로 언어 배우기, 프로그래밍 언어를 조감하다.","num":1},{"slug":"/tech-of-supporting-coding_2/","title":"문법, 처리흐름 제어","num":2}],"lastmod":"0001-01-01"}},"staticQueryHashes":["3649515864","63159454"]}